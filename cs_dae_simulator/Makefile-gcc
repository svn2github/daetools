# Compilation requires compiled daetools core libs, third party libs and additional third party libs: boost_mpi and idas_mpi

DAETOOLS_DIR  = ..
OPENCS_DIR    = ../opencs
BOOST_DIR     = ../boost
IDAS_DIR      = ../idas
TRILINOS_DIR  = ../trilinos
SUPERLU_DIR   = ../superlu
UMFPACK_DIR   = ../umfpack

OPENCS_INCLUDE   = -I$(OPENCS_DIR)
BOOST_INCLUDE    = -I$(BOOST_DIR)
IDAS_INCLUDE     = -I$(IDAS_DIR)/build/include
TRILINOS_INCLUDE = -I$(TRILINOS_DIR)/build/include

BOOST_LIBS    = -L$(BOOST_DIR)/stage/lib -lboost_mpi -lboost_serialization -lboost_filesystem -lboost_system -lpthread
IDAS_LIBS     = -L$(IDAS_DIR)/build/lib -lsundials_idas -lsundials_nvecparallel
MPI_LIBS      = -lmpi_cxx -lmpi
TRILINOS_LIBS = -L$(DAETOOLS_DIR)/release -lcdaeTrilinos_LASolver -L$(TRILINOS_DIR)/build/lib -L$(SUPERLU_DIR)/build/lib \
                -laztecoo -lml -lifpack -lamesos -lepetraext -ltriutils -lepetra -lteuchosremainder -lteuchosnumerics \
                -lteuchoscomm -lteuchosparameterlist -lteuchoscore \
                $(UMFPACK_DIR)/build/lib/libumfpack.a $(UMFPACK_DIR)/build/lib/libcholmod.a $(UMFPACK_DIR)/build/lib/libamd.a \
                $(UMFPACK_DIR)/build/lib/libcamd.a $(UMFPACK_DIR)/build/lib/libcolamd.a $(UMFPACK_DIR)/build/lib/libccolamd.a \
                $(UMFPACK_DIR)/build/lib/libsuitesparseconfig.a \
                -lsuperlu -llapack -lblas -lgfortran -lm 
THREAD_LIBS   = -lgomp -lpthread 

CC            = mpicc
CXX           = mpicxx
LINK          = mpicxx
DEFINES       =
CFLAGS        = -m64 -pipe -pthread -std=c99   -fopenmp -Wall -Wextra -Wno-unused-parameter -Wno-unused-variable -Wno-sign-compare -O3 $(DEFINES)
CXXFLAGS      = -m64 -pipe -pthread -std=c++11 -fopenmp -Wall -Wextra -Wno-unused-parameter -Wno-unused-variable -Wno-sign-compare -O3 $(DEFINES)
INCPATH       = -I. $(OPENCS_INCLUDE) $(BOOST_INCLUDE) $(IDAS_INCLUDE) $(TRILINOS_INCLUDE)
LFLAGS        = -m64 -pthread -Wl,-O2
LIBS          = $(TRILINOS_LIBS) $(BOOST_LIBS) $(IDAS_LIBS) $(MPI_LIBS) $(THREAD_LIBS)
OBJECTS_DIR   = release
DESTDIR       = bin
TARGET        = $(DESTDIR)/cs_dae_simulator
DEL_FILE      = rm -f
MKDIR_P       = mkdir -p

SOURCES       = auxiliary.cpp \
                config.cpp \
                daesolver.cpp \
                simulation.cpp \
                model.cpp \
                $(OPENCS_DIR)/sequential/cs_evaluator_sequential.cpp \
                preconditioner_jacobi.cpp \
                preconditioner_ifpack.cpp \
                preconditioner_ml.cpp \
                lasolver.cpp \
                main.cpp
                
OBJECTS       = $(OBJECTS_DIR)/auxiliary.o \
                $(OBJECTS_DIR)/config.o \
                $(OBJECTS_DIR)/daesolver.o \
                $(OBJECTS_DIR)/simulation.o \
                $(OBJECTS_DIR)/model.o \
                $(OBJECTS_DIR)/cs_evaluator_sequential.o \
                $(OBJECTS_DIR)/preconditioner_jacobi.o \
                $(OBJECTS_DIR)/preconditioner_ifpack.o \
                $(OBJECTS_DIR)/preconditioner_ml.o \
                $(OBJECTS_DIR)/lasolver.o \
                $(OBJECTS_DIR)/main.o

first: all

all: $(TARGET)

$(TARGET): $(OBJECTS) 
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJCOMP) $(LIBS)

clean: 
	-$(DEL_FILE) $(OBJECTS) $(TARGET)

$(OBJECTS_DIR)/auxiliary.o: auxiliary.cpp auxiliary.h cs_simulator.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $(OBJECTS_DIR)/auxiliary.o auxiliary.cpp

$(OBJECTS_DIR)/config.o: config.cpp cs_simulator.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $(OBJECTS_DIR)/config.o config.cpp

$(OBJECTS_DIR)/daesolver.o: daesolver.cpp auxiliary.h cs_simulator.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $(OBJECTS_DIR)/daesolver.o daesolver.cpp

$(OBJECTS_DIR)/simulation.o: simulation.cpp auxiliary.h cs_simulator.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $(OBJECTS_DIR)/simulation.o simulation.cpp

$(OBJECTS_DIR)/model.o: model.cpp auxiliary.h cs_simulator.h mpi_data_exchange.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $(OBJECTS_DIR)/model.o model.cpp

$(OBJECTS_DIR)/cs_evaluator_sequential.o: $(OPENCS_DIR)/sequential/cs_evaluator_sequential.cpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $(OBJECTS_DIR)/cs_evaluator_sequential.o $(OPENCS_DIR)/sequential/cs_evaluator_sequential.cpp

$(OBJECTS_DIR)/lasolver.o: lasolver.cpp cs_simulator.h auxiliary.h 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $(OBJECTS_DIR)/lasolver.o lasolver.cpp

$(OBJECTS_DIR)/main.o: main.cpp auxiliary.h cs_simulator.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $(OBJECTS_DIR)/main.o main.cpp

$(OBJECTS_DIR)/preconditioner_jacobi.o: preconditioner_jacobi.cpp cs_simulator.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $(OBJECTS_DIR)/preconditioner_jacobi.o preconditioner_jacobi.cpp

$(OBJECTS_DIR)/preconditioner_ifpack.o: preconditioner_ifpack.cpp cs_simulator.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $(OBJECTS_DIR)/preconditioner_ifpack.o preconditioner_ifpack.cpp

$(OBJECTS_DIR)/preconditioner_ml.o: preconditioner_ml.cpp cs_simulator.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $(OBJECTS_DIR)/preconditioner_ml.o preconditioner_ml.cpp
	

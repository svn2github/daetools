MEX function
------------
GNU Octave compile:
  cd mex
  mkoctfile -v --mex -I../simulation_loader -lcdaeSimulationLoader daetools_mex.c

Matlab compile:
  cd mex
  mex -v -I../simulation_loader -lcdaeSimulationLoader daetools_mex.c

Scilab compile:
  cd mex
  # check the include flag: cflags = -I... and set the correct full path for simulation loader
  exec('builder.sce')
  exec('loader.sce')  
  
Running daetools_mex simulation:
  res = daetools_mex('.../daetools/examples/tutorial20.py', 'simTutorial', 100.0, 5.0, {}, {})
  
MEX-function arguments:
  1. Path to the python file with daetools simulation (char array)
  2. Simulation class name (char array)
  3. TimeHorizon (double scalar),
  4. ReportingInterval (double scalar),
  5. Simulation inputs: parameters, DOFs, init.conditions, active states (cell array):
     Achtung, Achtung!! UNUSED AT THE MOMENT
       format: {'canonical_name', double array}
  6. Simulation options (cell array):
     Achtung, Achtung!! UNUSED AT THE MOMENT
       {'DAESolver',    char array: 'IDAS'},
       {'LASolver',     char array: one of 'SuperLU'|'SuperLU_MT'|'Pardiso'|'IntelPardiso'|...},
       {'DataReporter', char array: one of 'TCPIPDataReporter'|...,
                        char array: 'connection string'},
       {'Log',          char array: one of 'StdOutLog'|'PythonStdOutLog'|...}
Outputs:
  1. Cell array (pairs: {'variable_name', double matrix})
  Variables are put into the caller's workspace as well.

Simulink S-function
-------------------
Matlab compile:
  cd mex
  mex -v -I../simulation_loader -lcdaeSimulationLoader daetools_s.c 

Running S-function:
  Add a new S-Function ('system') from the User-Defined Functions palette.
  Set its dialog box parameters:
    - S-Function name: daetools_s
      (this is a compiled daetools_s.c file, resulting in, for instance, deatools.mexa64 binary)
    - S-Function parameters: see the description below
      example: '.../daetools/examples/tutorial20.py', 'simTutorial', 2, 2, {}, {}
    - S-Function modules: leave blank
  As a working example, the file 'test_s_function.mdl' in 'daetools/trunk/mex' directory can be used.

S-function parameters:
  1. Path to the python file with daetools simulation (char array)
  2. Simulation class name (char array)
  3. Number of input ports (integer, must match the number of inlet ports in daetools simulation)
  4. Number of output ports (integer, must match the number of outlet ports in daetools simulation)
  5. Simulation inputs (cell array)
     Achtung, Achtung!! UNUSED AT THE MOMENT
     For more details see the description of the simulation inputs argument of the daetools_mex function.
  6. Simulation options (cell array)
     Achtung, Achtung!! UNUSED AT THE MOMENT
     For more details see the description of the simulation options argument of the daetools_mex function.



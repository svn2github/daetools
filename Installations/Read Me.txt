Windows headers and libs:

mkdir cDAE
cd cDAE
mkdir lib
mkdir include
cd include
mkdir Core
mkdir Activity
mkdir DataReporting
mkdir IDAS_DAESolver
cd ..
cd ..

Python setup 
ECHO package_data={'%DEST%': ['*.*', 'pyDAE/*.*', 'examples/*.*', 'docs/*.*', 'docs/images/*.*', 'docs/api_ref/*.*', 'daeSimulator/*.*', 'daeSimulator/images/*.*', 'daePlotter/*.*', 'daePlotter/images/*.*', 'cDAE/include/*.*', 'cDAE/include/Core/*.*', 'cDAE/include/DataReporters/*.*', 'cDAE/include/Simulation/*.*', 'cDAE/include/Solver/*.*', 'cDAE/lib/*.*', 'pyAmdACML/*.*', 'pyIntelMKL/*.*', 'pyLapack/*.*', 'pyIntelPardiso/*.*', 'pyAtlas/*.*', 'pyTrilinosAmesos/*.*']} >> setup.py

REM Include
cd %TRUNK%
copy dae.h           %ROOT%\cDAE\include
copy dae_develop.h   %ROOT%\cDAE\include

cd %TRUNK%\Core
copy definitions.h      %ROOT%\cDAE\include\Core
copy xmlfile.h          %ROOT%\cDAE\include\Core
copy helpers.h          %ROOT%\cDAE\include\Core
copy base_logging.h     %ROOT%\cDAE\include\Core
copy macros.h           %ROOT%\cDAE\include\Core
copy class_factory.h    %ROOT%\cDAE\include\Core
copy coreimpl.h         %ROOT%\cDAE\include\Core

cd %TRUNK%\Activity
copy base_activities.h  %ROOT%\cDAE\include\Activity
copy simulation.h       %ROOT%\cDAE\include\Activity

cd %TRUNK%\DataReporting
copy datareporters.h                    %ROOT%\cDAE\include\DataReporting
copy base_data_reporters_receivers.h    %ROOT%\cDAE\include\DataReporting

cd %TRUNK%\IDAS_DAESolver
copy base_solvers.h     %ROOT%\cDAE\include\IDAS_DAESolver
copy ida_solver.h       %ROOT%\cDAE\include\IDAS_DAESolver

xcopy %IDAS%\include %ROOT%\cDAE\include /E
xcopy %BONMIN%\include %ROOT%\cDAE\include /E

REM Lib
cd %TRUNK%\release
copy cdaeCore.lib                %ROOT%\cDAE\lib
copy cdaeActivity.lib            %ROOT%\cDAE\lib
copy cdaeIDAS_DAESolver.lib      %ROOT%\cDAE\lib
copy cdaeDataReporting.lib       %ROOT%\cDAE\lib
copy cdaeBONMIN_MINLPSolver.lib  %ROOT%\cDAE\lib

cd %IDAS%\lib
copy *.lib         %ROOT%\cDAE\lib

cd %BONMIN%\lib
copy *.lib         %ROOT%\cDAE\lib
copy *.dll         %ROOT%\cDAE\lib



GNU/Linux files:


echo "      package_data={'${PACKAGE_NAME}': ['*.*', 'pyDAE/*.*', 'examples/*.*', 'examples/images/*.*', 'docs/*.*', 'docs/images/*.*', 'docs/api_ref/*.*', 'daeSimulator/*.*', 'daeSimulator/images/*.*', 'daePlotter/*.*', 'daePlotter/images/*.*', 'cDAE/include/*.*', 'cDAE/include/Core/*.*', 'cDAE/include/DataReporters/*.*', 'cDAE/include/Simulation/*.*', 'cDAE/include/Solver/*.*', 'cDAE/lib/*.*', 'pyAmdACML/*.*', 'pyIntelMKL/*.*', 'pyLapack/*.*', 'pyIntelPardiso/*.*', 'pyAtlas/*.*', 'pyTrilinosAmesos/*.*']} " >> setup.py



# cDAE Files
mkdir ${BUILD_DIR}/usr/include
mkdir ${BUILD_DIR}/usr/include/daetools
mkdir ${BUILD_DIR}/usr/include/daetools/Core
mkdir ${BUILD_DIR}/usr/include/daetools/Activity
mkdir ${BUILD_DIR}/usr/include/daetools/DataReporting
mkdir ${BUILD_DIR}/usr/include/daetools/IDAS_DAESolver
mkdir ${BUILD_DIR}/usr/include/daetools/BONMIN_MINLPSolver

mkdir ${BUILD_DIR}/usr/${LIB}/daetools

# Include files
cp ../config.h       ${BUILD_DIR}/usr/include/daetools
cp ../dae.h          ${BUILD_DIR}/usr/include/daetools
cp ../dae_develop.h  ${BUILD_DIR}/usr/include/daetools

cp ../Core/definitions.h    ${BUILD_DIR}/usr/include/daetools/Core
cp ../Core/xmlfile.h        ${BUILD_DIR}/usr/include/daetools/Core
cp ../Core/helpers.h        ${BUILD_DIR}/usr/include/daetools/Core
cp ../Core/base_logging.h   ${BUILD_DIR}/usr/include/daetools/Core
cp ../Core/macros.h         ${BUILD_DIR}/usr/include/daetools/Core
cp ../Core/class_factory.h  ${BUILD_DIR}/usr/include/daetools/Core
cp ../Core/coreimpl.h       ${BUILD_DIR}/usr/include/daetools/Core

cp ../Activity/base_activities.h  ${BUILD_DIR}/usr/include/daetools/Activity
cp ../Activity/simulation.h       ${BUILD_DIR}/usr/include/daetools/Activity

cp ../DataReporting/datareporters.h                 ${BUILD_DIR}/usr/include/daetools/DataReporting
cp ../DataReporting/base_data_reporters_receivers.h ${BUILD_DIR}/usr/include/daetools/DataReporting

cp ../IDAS_DAESolver/base_solvers.h  ${BUILD_DIR}/usr/include/daetools/IDAS_DAESolver
cp ../IDAS_DAESolver/ida_solver.h    ${BUILD_DIR}/usr/include/daetools/IDAS_DAESolver

cp ../BONMIN_MINLPSolver/nlpsolver.h    ${BUILD_DIR}/usr/include/daetools/BONMIN_MINLPSolver

# Static libraries
cp ../release/libcdaeCore.a                ${BUILD_DIR}/usr/${LIB}/daetools
cp ../release/libcdaeActivity.a            ${BUILD_DIR}/usr/${LIB}/daetools
cp ../release/libcdaeDataReporting.a       ${BUILD_DIR}/usr/${LIB}/daetools
cp ../release/libcdaeIDAS_DAESolver.a      ${BUILD_DIR}/usr/${LIB}/daetools
cp ../release/libcdaeBONMIN_MINLPSolver.a  ${BUILD_DIR}/usr/${LIB}/daetools
cp ${IDAS}/lib/libsundials_idas.a          ${BUILD_DIR}/usr/${LIB}/daetools
cp ${IDAS}/lib/libsundials_nvecserial.a    ${BUILD_DIR}/usr/${LIB}/daetools

# Trilinos Amesos libraries
if [ -e ${TRILINOS}/libamesos.so ]; then
  cp ${TRILINOS}/libamesos.so         ${BUILD_DIR}/usr/${LIB}
  cp ${TRILINOS}/libepetra.so         ${BUILD_DIR}/usr/${LIB}
  cp ${TRILINOS}/libtriutils.so       ${BUILD_DIR}/usr/${LIB}
  cp ${TRILINOS}/libgaleri.so         ${BUILD_DIR}/usr/${LIB}
  cp ${TRILINOS}/libepetraext.so      ${BUILD_DIR}/usr/${LIB}
  cp ${TRILINOS}/libzoltan.so         ${BUILD_DIR}/usr/${LIB}
  cp ${TRILINOS}/libsimpi.so          ${BUILD_DIR}/usr/${LIB}
  cp ${TRILINOS}/libteuchos.so        ${BUILD_DIR}/usr/${LIB}
fi

# Bonmin libraries
if [ -d ${BONMIN}/lib ]; then
  cp -d ${BONMIN}/lib/*.so*            ${BUILD_DIR}/usr/${LIB}
fi

# Change permissions and strip .so libraries (Trilinos Amesos and Bonmin)
chmod -x ${BUILD_DIR}/usr/${LIB}/*.so* 
chmod -x ${BUILD_DIR}/usr/${LIB}/daetools/*.a* 
find ${BUILD_DIR}/usr/${LIB} -name \*.so* | xargs strip 




  SHLIBS=${BUILD_DIR}/DEBIAN/shlibs
  echo "libbonmin 0 libonmin.so.0 (>= 0:0.0.0)"                                           > ${SHLIBS}
  echo "libCbc 0 libCbc.so.0 (>= 0:0.0.0)"                                               >> ${SHLIBS}
  echo "libCbcSolver 0 libCbcSolver.so.0 (>= 0:0.0.0)"                                   >> ${SHLIBS}
  echo "libCgl 0 libCgl.so.0 (>= 0:0.0.0)"                                               >> ${SHLIBS}
  echo "libClp 0 libClp.so.0 (>= 0:0.0.0)"                                               >> ${SHLIBS}
  echo "libCoinUtils 0 libCoinUtils.so.0 (>= 0:0.0.0)"                                   >> ${SHLIBS}
  echo "libipopt 0 libipopt.so.0 (>= 0:0.0.0)"                                           >> ${SHLIBS}
  echo "libOsiCbc 0 libOsiCbc.so.0 (>= 0:0.0.0)"                                         >> ${SHLIBS}
  echo "libOsiClp 0 libOsiClp.so.0 (>= 0:0.0.0)"                                         >> ${SHLIBS}
  echo "libOsi 0 libOsi.so.0 (>= 0:0.0.0)"                                               >> ${SHLIBS}
